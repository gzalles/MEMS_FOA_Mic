#test the nelson/kirkeby algorithm w/o regularization using simple transfer functions #the function is returning imaginary values from FFT, not sure why.#using this script to test some things out#H_inv = (H_target * conj(H)') / (conj(H) * H' ); #we need two Hs for this test. I will use the FFT of a delta function and the #FFT of a windowed white noise clc; clear all; close all;plotOn = 1; #plot on/offFs = 44100; #define sampling rateNfft = 512; #FFT size wn = rand(Nfft, 1); #one column of random values (white noise)wn = (2 .* wn) - 1; #adjust range from -1 to 1, rather than 0 to 1 freqVec = linspace(0, Fs/2, Nfft/2); #freq vector for plotting (W)bm = blackman(Nfft); #create a blackman window, avoid spectral leakage in FFTwn = wn .* bm; #window the white noise WN = fft(wn, Nfft); #get the FFT of white noise WN_mag = abs(WN); #get the magnitude of WN if plotOn == 1   plot(freqVec, 20*log10(WN_mag(1:end/2))); #plot half of magnitude in dB  axis tight;  hold on;     title('NK Test')  ylabel('Mag in dB');  xlabel('Freq in Hz');endif# the frequency response of windowed white noise is stochastic (random)delta = zeros(Nfft, 1); #init memory for delta delta(2, 1) = 1; #place 1 at first index DELTA = fft(delta, Nfft); #get FFT of deltaDELTA_mag = abs(DELTA); #get magnitude if plotOn == 1  plot(freqVec, 20*log10(DELTA_mag(1:end/2))); #plot half of magnitude of DELTA in dBendif H_target = DELTA; #assign variableH = WN; #assign variable#perform NK without regularization H_inv = (H_target .* conj(H)) ./ (conj(H) .* H );H_inv_mag = abs(H_inv); #get magif plotOn == 1  plot(freqVec, 20*log10(H_inv_mag(1:end/2))); #plot half of magnitude of H_inv in dB  ylim("auto");endif # once you make the inverse filter, you need to convolve with original H_conv = H_inv .* H;H_conv_mag = abs(H_conv);if plotOn == 1  plot(freqVec, 20*log10(H_conv_mag(1:end/2))); #plot half of magnitude of H_inv in dB  legend("WN", "DELTA", "Inverse", "Convolved");endif # delta and convolved are equal, as we want.# this works, i just need to get the signal lengths right. # the problem was making filter min. phase